class SGTree {
    public:
        vector<int> seg, lazy;
        SGTree(int sz){
            seg.resize(4 * sz + 1);
            lazy.resize(4 * sz + 1);
        }

        void build(int i, int lo, int hi, vector<int> &arr){
            if(lo == hi) {
                seg[i] = arr[lo];
                return;
            }
            int mid = (lo + hi) / 2 ;
            build(2*i+1, lo, mid, arr);
            build(2*i+2, mid+1, hi, arr);

            // complete the tree here
            seg[i] = seg[2*i+1] + seg[2*i+2]; // sum
        }

        void lazyUpdates(int i, int lo, int hi, int l, int r, int val, vector<int> &arr){
            if(lazy[i] != 0) {
                seg[i] += (hi - lo + 1) * lazy[i];
                lazy[2*i+1] += lazy[i];
                lazy[2*i+2] += lazy[i];
                lazy[i] = 0;
            }

            // low high l r or l r low high
            if(r < lo || l > hi) return;

            // l low high r
            if(lo >= l && hi <= r){
                seg[i] += (hi - lo + 1) * val;
                if(lo != hi){
                    lazy[2*i+1] += val;
                    lazy[2*i+2] += val;
                }
                return;
            }

            int mid = (lo + hi) / 2; 
            lazyUpdates(2*i+1, lo, mid, l, r, val, arr);
            lazyUpdates(2*i+2, mid+1, hi, l, r, val, arr);

            //complete the tree
            seg[i] = seg[2*i+1] + seg[2*i+2] ;

        }

        void pointUpdate(int i, int lo, int hi, int idx, int val, vector<int> &arr){
            if(lo == hi){
                arr[idx] += val;
                seg[i] += val;
                return;
            }

            int mid = (lo + hi) / 2 ;
            if(idx <= mid) pointUpdate(2*i+1, lo, mid, idx, val, arr);
            else pointUpdate(2*i+2, mid+1, hi, idx, val, arr);

            // complete the tree
            seg[i] = seg[2*i+1] + seg[2*i+2] ;
        }

        int query(int i, int lo, int hi, int l, int r, vector<int> &arr){
            // l low high r
            if(lo >= l && hi <= r){
                return seg[i];
            }

            // l r lo hi or lo hi l r
            if(r < lo || l > hi) return 0; // changes can be made

            int mid = (lo + hi) / 2 ;

            // complete the tree
            int ans = query(2*i+1, lo, mid, l, r, arr) + query(2*i+2, mid+1, hi, l, r, arr) ;
            return ans;
        }
};
